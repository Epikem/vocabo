version: '2'

# same as
# docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve

# docker run -d -p 9200:9200 -p 9300:9300 --name elastic -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:6.4.0
# docker run -d --link elastic:elastic-url -e "ELASTICSEARCH_URL=http://elastic-url:9200" -p 5601:5601 --name kibana docker.elastic.co/kibana/kibana:6.4.0

services:
  elastic:
    # image: docker.elastic.co/elasticsearch/elasticsearch:6.4.0
    image: elastic2:0.1
    volumes:
      - ./docker/elastic
    environment:
      - discovery.type=single-node
    ports:
      - '9200:9200'
      - '9300:9300'
  kibana:
    image: docker.elastic.co/kibana/kibana:6.6.0
    volumes:
      - ./docker/kibana
    environment:
      - ELASTICSEARCH_URL=http://elastic-url:9200
    links:
      - elastic:elastic-url
    depends_on:
      - elastic
    ports:
      - '5601:5601'
  server:
    build:
      context: ./server/
    command: /usr/app/node_modules/.bin/nodemon src/index.js
    volumes:
      - ./server/:/usr/app
      - /usr/app/node_modules
    depends_on:
      - elastic
    links:
      - elastic:elastic-url
    ports:
      - "3001:3001"
    # env_file: ./server/.env # TODO - uncomment this to auto-load your .env file!
    environment:
      - ELASTICSEARCH_URL=http://elastic-url:9200
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
  client:
    build:
      context: ./client/
    command: npm start
    volumes:
      - ./client/:/usr/app
      - /usr/app/node_modules
    depends_on:
      - server
    ports:
      - "3000:3000"

# version: "3"
# services:
#   es:
#     image: elastic/elastic/elasticsearch
#     ports:
#       - "9001"
#     networks:
#       - backend
#     deploy:
#       replicas: 1

#   server:
#     image: ubuntu
#     ports:
#       - "3001"
#     netword:
#       - backend
#     deploy:
#       replicas: 1

#   client:
#     build:
#       context: ./client/
#     command: npm start
#     volumes:
#       - ./client/:/usr/app
#       - /usr/app/node_modules
#     depends_on:
#       - server
#     ports:
#       - "3000:3000"



#   redis:
#     image: redis:alpine
#     ports:
#       - "6379"
#     networks:
#       - frontend
#     deploy:
#       replicas: 2
#       update_config:
#         parallelism: 2
#         delay: 10s
#       restart_policy:
#         condition: on-failure

#   db:
#     image: postgres:9.4
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     networks:
#       - backend
#     deploy:
#       placement:
#         constraints: [node.role == manager]

#   vote:
#     image: dockersamples/examplevotingapp_vote:before
#     ports:
#       - "5000:80"
#     networks:
#       - frontend
#     depends_on:
#       - redis
#     deploy:
#       replicas: 2
#       update_config:
#         parallelism: 2
#       restart_policy:
#         condition: on-failure

#   result:
#     image: dockersamples/examplevotingapp_result:before
#     ports:
#       - "5001:80"
#     networks:
#       - backend
#     depends_on:
#       - db
#     deploy:
#       replicas: 1
#       update_config:
#         parallelism: 2
#         delay: 10s
#       restart_policy:
#         condition: on-failure

#   worker:
#     image: dockersamples/examplevotingapp_worker
#     networks:
#       - frontend
#       - backend
#     deploy:
#       mode: replicated
#       replicas: 1
#       labels: [APP=VOTING]
#       restart_policy:
#         condition: on-failure
#         delay: 10s
#         max_attempts: 3
#         window: 120s
#       placement:
#         constraints: [node.role == manager]

#   visualizer:
#     image: dockersamples/visualizer:stable
#     ports:
#       - "8080:8080"
#     stop_grace_period: 1m30s
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock"
#     deploy:
#       placement:
#         constraints: [node.role == manager]

# networks:
#   frontend:
#   backend:

# volumes:
#   db-data: