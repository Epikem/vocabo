version: '2'
services:
  server:
    build:
      context: ./server/
    command: /usr/app/node_modules/.bin/nodemon src/index.js
    volumes:
      - ./server/:/usr/app
      - /usr/app/node_modules
    ports:
      - "8080:8080"
    # env_file: ./server/.env # TODO - uncomment this to auto-load your .env file!
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
  client:
    build:
      context: ./client/
    command: npm start
    volumes:
      - ./client/:/usr/app
      - /usr/app/node_modules
    depends_on:
      - server
    ports:
      - "3000:3000"

# version: "3"
# services:
#   es:
#     image: elastic/elastic/elasticsearch
#     ports:
#       - "9001"
#     networks:
#       - backend
#     deploy:
#       replicas: 1

#   server:
#     image: ubuntu
#     ports:
#       - "3001"
#     netword:
#       - backend
#     deploy:
#       replicas: 1

#   client:
#     build:
#       context: ./client/
#     command: npm start
#     volumes:
#       - ./client/:/usr/app
#       - /usr/app/node_modules
#     depends_on:
#       - server
#     ports:
#       - "3000:3000"



#   redis:
#     image: redis:alpine
#     ports:
#       - "6379"
#     networks:
#       - frontend
#     deploy:
#       replicas: 2
#       update_config:
#         parallelism: 2
#         delay: 10s
#       restart_policy:
#         condition: on-failure

#   db:
#     image: postgres:9.4
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     networks:
#       - backend
#     deploy:
#       placement:
#         constraints: [node.role == manager]

#   vote:
#     image: dockersamples/examplevotingapp_vote:before
#     ports:
#       - "5000:80"
#     networks:
#       - frontend
#     depends_on:
#       - redis
#     deploy:
#       replicas: 2
#       update_config:
#         parallelism: 2
#       restart_policy:
#         condition: on-failure

#   result:
#     image: dockersamples/examplevotingapp_result:before
#     ports:
#       - "5001:80"
#     networks:
#       - backend
#     depends_on:
#       - db
#     deploy:
#       replicas: 1
#       update_config:
#         parallelism: 2
#         delay: 10s
#       restart_policy:
#         condition: on-failure

#   worker:
#     image: dockersamples/examplevotingapp_worker
#     networks:
#       - frontend
#       - backend
#     deploy:
#       mode: replicated
#       replicas: 1
#       labels: [APP=VOTING]
#       restart_policy:
#         condition: on-failure
#         delay: 10s
#         max_attempts: 3
#         window: 120s
#       placement:
#         constraints: [node.role == manager]

#   visualizer:
#     image: dockersamples/visualizer:stable
#     ports:
#       - "8080:8080"
#     stop_grace_period: 1m30s
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock"
#     deploy:
#       placement:
#         constraints: [node.role == manager]

# networks:
#   frontend:
#   backend:

# volumes:
#   db-data: